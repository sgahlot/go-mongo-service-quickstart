// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	mongo "github.com/sgahlot/go-mongo-service-quickstart/pkg/mongo"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteFruits provides a mock function with given fields: req
func (_m *Service) DeleteFruits(req *mongo.Fruit) mongo.FruitResponse {
	ret := _m.Called(req)

	var r0 mongo.FruitResponse
	if rf, ok := ret.Get(0).(func(*mongo.Fruit) mongo.FruitResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(mongo.FruitResponse)
	}

	return r0
}

// GetFruit provides a mock function with given fields: req
func (_m *Service) GetFruit(req *mongo.Fruit) mongo.Fruit {
	ret := _m.Called(req)

	var r0 mongo.Fruit
	if rf, ok := ret.Get(0).(func(*mongo.Fruit) mongo.Fruit); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(mongo.Fruit)
	}

	return r0
}

// GetFruits provides a mock function with given fields: req
func (_m *Service) GetFruits(req *mongo.Fruit) mongo.FruitResponse {
	ret := _m.Called(req)

	var r0 mongo.FruitResponse
	if rf, ok := ret.Get(0).(func(*mongo.Fruit) mongo.FruitResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(mongo.FruitResponse)
	}

	return r0
}

// InsertFruit provides a mock function with given fields: req
func (_m *Service) InsertFruit(req *mongo.Fruit) mongo.FruitResponse {
	ret := _m.Called(req)

	var r0 mongo.FruitResponse
	if rf, ok := ret.Get(0).(func(*mongo.Fruit) mongo.FruitResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(mongo.FruitResponse)
	}

	return r0
}
